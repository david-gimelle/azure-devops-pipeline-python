# Manual and branch triggers
trigger:
  - main

# Use Ubuntu latest image
pool:
  vmImage: "ubuntu-latest"

# Define variables
variables:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.1.11"
  IMAGE_NAME: "python-demo-api"
  REGISTRY: "ghcr.io"
  REPOSITORY: "david-gimelle/azure-devops-pipeline-python"
  WORKING_DIR: "$(System.DefaultWorkingDirectory)"
  TERRAFORM_VERSION: "1.5.7"
  TERRAFORM_DIR: "$(System.DefaultWorkingDirectory)/terraform"

# Define pipeline stages
stages:
  - stage: Build
    jobs:
      - job: BuildAndTest
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(PYTHON_VERSION)"
              addToPath: true
            displayName: "Set up Python"

          - script: |
              curl -sSL https://install.python-poetry.org | python3 -
              echo "##vso[task.setvariable variable=PATH]$HOME/.local/bin:$PATH"
            workingDirectory: $(WORKING_DIR)
            displayName: "Install Poetry"

          - script: |
              poetry install --no-root
            workingDirectory: $(WORKING_DIR)
            displayName: "Install dependencies"

          #- script: |
          #    python install-build.py --skip-install-poetry
          #  workingDirectory: $(WORKING_DIR)
          #  displayName: "Build Docker image"

          #- script: |
          #    poetry run pytest
          #  workingDirectory: $(WORKING_DIR)
          #  displayName: "Run tests"

          # Push to GitHub Container Registry
          #- task: Docker@2
          #  inputs:
          #    containerRegistry: "github-container-registry"
          #    repository: "$(REPOSITORY)/$(IMAGE_NAME)"
          #    command: "buildAndPush"
          #    Dockerfile: "**/Dockerfile"
          #    tags: |
          #      $(Build.BuildId)
          #      latest
          #  displayName: "Push Docker image"

  - stage: Infrastructure
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: TerraformDeploy
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(TERRAFORM_VERSION)"
            displayName: "Install Terraform"

          - task: TerraformTaskV4@4
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(TERRAFORM_DIR)"
              backendType: "azurerm"
              backendServiceArm: "azure-service-connection"
              backendAzureRmResourceGroupName: "adodemo"
              backendAzureRmStorageAccountName: "adodemoterraform"
              backendAzureRmContainerName: "terrastate"
              backendAzureRmKey: "terraform/python-demo-api/state/dev.tfstate"
            displayName: "Terraform Init"

          - task: TerraformTaskV4@4
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(TERRAFORM_DIR)"
            displayName: "Terraform Validate"

          - task: TerraformTaskV4@4
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(TERRAFORM_DIR)"
              environmentServiceNameAzureRM: "azure-service-connection"
            env:
              TF_VAR_client_id: $(ARM_CLIENT_ID)
              TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
              TF_VAR_tenant_id: $(ARM_TENANT_ID)
              TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
              # No need to add TF_VAR_cluster_name, TF_VAR_location, and TF_VAR_resource_group_name here
              # as they're already defined as pipeline variables and automatically available to tasks
            displayName: "Terraform Plan"

          - task: TerraformTaskV4@4
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(TERRAFORM_DIR)"
              environmentServiceNameAzureRM: "azure-service-connection"
              commandOptions: "-auto-approve"
            env:
              TF_VAR_client_id: $(ARM_CLIENT_ID)
              TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
              TF_VAR_tenant_id: $(ARM_TENANT_ID)
              TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
              # No need to add TF_VAR_cluster_name, TF_VAR_location, and TF_VAR_resource_group_name here
              # as they're already defined as pipeline variables and automatically available to tasks
            displayName: "Terraform Apply"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  # New deployment stage
  - stage: Deploy
    dependsOn: Infrastructure
    condition: succeeded()
    jobs:
      - job: DeployToAKS
        steps:
          # Get AKS credentials
          - task: AzureCLI@2
            inputs:
              azureSubscription: "azure-service-connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Get AKS credentials
                az aks get-credentials \
                  --resource-group adodemo \
                  --name python-demo-app-cluster \
                  --overwrite-existing
              displayName: "Get AKS Credentials"

          # Replace the image tag in the Kubernetes manifest
          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                # Replace placeholder with actual build ID
                sed -i 's/:placeholder/:$(Build.BuildId)/g' $(WORKING_DIR)/k8s/python-demo-api.yml
              displayName: "Update Image Tag"

          # Install kubectl
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: "latest"
            displayName: "Install kubectl"

          # Create a secret for GitHub Container Registry
          - task: Kubernetes@1
            inputs:
              connectionType: "None"
              command: "create"
              arguments: "secret docker-registry ghcr-secret --docker-server=$(REGISTRY) --docker-username=$(GHCR_USERNAME) --docker-password=$(GHCR_PAT) --docker-email=$(GHCR_EMAIL) -n python-demo-api --dry-run=client -o yaml | kubectl apply -f -"
            displayName: "Create Pull Secret"

          # Deploy the application
          - task: Kubernetes@1
            inputs:
              connectionType: "None"
              command: "apply"
              useConfigurationFile: true
              configuration: "$(WORKING_DIR)/k8s/python-demo-api.yml"
            displayName: "Deploy to AKS"

          # Verify deployment
          - task: Kubernetes@1
            inputs:
              connectionType: "None"
              command: "get"
              arguments: "pods,svc -n python-demo-api"
            displayName: "Verify Deployment"
